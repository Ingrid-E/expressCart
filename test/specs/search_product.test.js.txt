const request = require('supertest');
const app = require('../../app');

// Importa las dependencias necesarias y configÃºralas

// Define el mock para db.products.find
const mockDb = {
  products: {
    find: jest.fn().mockResolvedValue([{ id: 1, name: 'Product 1' }, { id: 2, name: 'Product 2' }])
  }
};

// Define el test
describe('GET /admin/products/filter/:search', () => {

  it('should return filtered products', async () => {
    const searchTerm = 'example';

    // Realiza la llamada a la ruta utilizando supertest y el app con el mock de db
    const response = await request(app)
      .get(`/admin/products/filter/${searchTerm}`)
      .set('Accept', 'application/json')
      .set('db', mockDb);

    // Verifica el comportamiento esperado
    expect(response.statusCode).toBe(200);
    expect(response.body).toEqual([{ id: 1, name: 'Product 1' }, { id: 2, name: 'Product 2' }]);
    expect(mockDb.products.find).toHaveBeenCalledWith({ _id: { $in: [1,2] } });
  });

});





